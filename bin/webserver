#!/bin/bash
#\
export TCLLIBPATH="$(dirname $0)/../lib/getopt-tcl${TCLLIBPATH+:}${TCLLIBPATH}"
#\
exec tclsh "$0" "$@"

lappend auto_path {*}[split $env(TCLLIBPATH) ":"]
package require getopt
package require json
package require json::write


###########################################################################
# DEFAULTS

set opts(debug)     0
set opts(port)      5000
set opts(server)    "0.0.0.0"
set opts(basepath)  "$env(HOME)/public_html"

set api(enabled)    0
set api(path)       "/api"
set api(auth)       ""
set api(store)      "$opts(basepath)/apidata.json"
set api(limit)      [expr 4 * 1024 * 1024]
set api(usage)      0

set pages(200)  "index.html"
set pages(403)  "forbidden.html"
set pages(404)  "missing.html"


###########################################################################
# PROGRAM BEGINS HERE

proc main { argv } {
    global api
    global opts
    set errcount 0

    while { 1 } {
        set c [getopt $argv "debug 0 port is_port server 1 basepath is_dir api-enable 0 api-auth 1 api-path 1 api-store 1"]
        if { $c == -1 } break

        switch -exact -- $c {
            debug       { set opts(debug) 1             }
            port        { set opts(port) $optarg        }
            server      { set opts(server) $optarg      }
            basepath    { set opts(basepath) $optarg    }
            api-enable  { set api(enabled) 1            }
            api-auth    { set api(auth) $optarg         }
            api-path    { set api(path) $optarg         }
            api-store   { set api(store) $optarg        }

            - {
                puts stderr "invalid argument -- $optarg"
                incr errcount
            }

            default { incr errcount }
        }
    }

    # Sanity check
    if { $errcount } {
        exit 1
    }

    # Initialize
    api_load

    # Listen
    socket -server on_connect -myaddr $opts(server) $opts(port)
    puts "Listening on $opts(server):$opts(port)..."

    if { $api(enabled) } {
        puts "API endpoint at $api(path)"
    }

    vwait forever
}


proc on_connect { chan addr port } {
    # Configure the channel for binary mode
    fconfigure $chan -translation binary

    # Read the header when they send it
    fileevent $chan readable [list on_readable $chan $addr $port]
}


proc on_readable { chan addr port } {
    global opts
    global sess
    set req(channel) $chan
    set req(remote|addr) $addr
    set req(remote|port) $port

    # Disable the readable handler
    fileevent $chan readable {}

    # Get the request line
    lassign [string trim [gets $chan]] req(method) req(url) req(http)

    # HTTP check
    if { [lindex [split $req(http) "/"] 0] ne "HTTP" } {
        puts "$addr:$port - Received non-HTTP request, closing"
        close $chan
        return
    }

    # Log this connection
    puts "$addr:$port - $req(method) $req(url) $req(http)"

    # Parse the URL
    lassign [split $req(url) "?"] req(path) req(query)
    set req(path) [url_decode $req(path)]
    foreach param [split $req(query) "&"] {
        lassign [split $param "="] name value

        set req(query|$name) [url_decode $value]
    }

    # Get the remaining header
    while { 1 } {
        set line [split [string trim [gets $chan]] ":"]
        if { $line eq "" } break

        set name [string tolower [lindex $line 0]]
        set value [string trim [join [lrange $line 1 end] ":"]]
        set req(header|$name) $value
    }

    # Show what we got
    if { $opts(debug) } {
        set display_order [list channel method http url path "query*" "remote*" "header*"]

        foreach pattern $display_order {
            foreach name [lsort -dictionary [array names req $pattern]] {
                puts "  $name: $req($name)"
            }
        }
    }

    # Call the method handler
    switch -exact -- $req(method) {
        GET     { on_get_request req    }
        PUT     { on_put_request req    }
        DELETE  { on_delete_request req }
        POST    { on_post_request req   }
        default { send_response req 405 }
    }

    # Close channel if we're done with it
    if { ! [info exists sess($chan|keep_open)] } {
        close $chan
    }
}


proc on_get_request { request } {
    global api
    upvar $request req
    set chan $req(channel)
    set path $req(path)

    # Handle API path
    if { $api(enabled) && [api_ispath $path] } {
        set name [api_pathname $path]

        # Get all items under a path
        if { $name eq "" || [string match "*/" $name] } {
            set data [api_getjson $name]

            send_data req --status=200 --header [list "Content-Type" "application/json"] -- $data
        # Get a specific item
        } elseif { [info exists api(data|$name)] } {
            set data $api(data|$name)
            set contentType "text/plain"

            if { [info exists req(header|content-type)] } {
                set contentType $req(header|content-type)
            }

            # Send data with the same contentType as the one we received
            send_data req --status=200 --header [list "Content-Type" $contentType] -- $data
        # Item not found
        } else {
            send_data req --status=404 --header [list "Content-Type" "text/plain"] -- "No such path\n"
        }

        return
    }

    send_file req $path
}


proc on_put_request { request } {
    global api
    upvar $request req
    set chan $req(channel)
    set path $req(path)

    if { $api(enabled) } {
        set name [api_pathname $path]
        set auth ""
        set length 0
        set contentType "text/plain"

        # Read the request headers
        if { [info exists req(header|authorization)] } { set auth [lindex $req(header|authorization) 1] }
        if { [info exists req(header|content-length)] } { set length $req(header|content-length) }
        if { [info exists req(header|content-type)] } { set contentType $req(header|content-type) }

        # Validate
        if { $auth ne $api(auth) } {
            send_data req --status=403 --header [list "Content-Type" "text/plain"] -- "Invalid authorization\n"
            return
        }

        if { $name eq "" } {
            send_data req --status=409 --header [list "Content-Type" "text/plain"] -- "Invalid path\n"
            return
        }

        if { $api(usage) - [api_usageof $name] + [string length "$name|\0"] + $length > $api(limit) } {
            send_data req --status=409 --header [list "Content-Type" "text/plain"] -- "Limit exceeded\n"
            return
        }

        # Read the request body
        set rxbody [read $chan $length]

        # Put the value
        api_put $name $rxbody

        if { ! [api_save] } {
            send_data req --status=503 --header [list "Content-Type" "text/plain"] -- "Unable to persist PUT\n"
            return
        }

        send_data req --status=200 --header [list "content-Type" "text/plain"] -- "Ok\n"
        return
    }

    send_response req 405
}


proc on_delete_request { request } {
    global api
    upvar $request req
    set chan $req(channel)
    set path $req(path)

    if { $api(enabled) } {
        set name [api_pathname $path]
        set auth ""

        # Read the request headers
        if { [info exists req(header|authorization)] } { set auth [lindex $req(header|authorization) 1] }

        # Validate
        if { $auth ne $api(auth) } {
            send_data req --status=403 --header [list "Content-Type" "text/plain"] -- "Invalid authorization\n"
            return
        }

        if { $name eq "" } {
            send_data req --status=409 --header [list "Content-Type" "text/plain"] -- "Invalid path\n"
            return
        }

        # Delete the value
        if { [info exists api(data|$name)] } {
            api_delete $name

            if { ! [api_save] } {
                send_data req --status=503 --header [list "Content-Type" "text/plain"] -- "Unable to persist DELETE\n"
                return
            }
        }

        send_data req --status=200 --header [list "content-Type" "text/plain"] -- "Ok\n"
        return
    }

    send_response req 405
}


proc on_post_request { request } {
    upvar $request req
    set chan $req(channel)
    set length 0
    set contentType "text/plain"

    # Read the request headers
    if { [info exists req(header|content-length)] } { set length $req(header|content-length) }
    if { [info exists req(header|content-type)] } { set contentType $req(header|content-type) }

    # Read the request body
    set rxbody [read $chan $length]

    # Read the character set
    lassign [split $contentType ";="] ct1 ct2 ct3
    if { [string trim $ct2] eq "charset" } {
        set charset [string tolower $ct3];
    }

    # Convert from the character set
    if { [info exists charset] } {
        catch {set rxbody [encoding convertfrom $charset $rxbody]} errmsg
    }

    # Convert escape sequences
    set rxbody [subst -nocommands -novariables $rxbody]

    # TODO - Do something interesting here
    puts $rxbody

    # Convert to the expected character set
    if { [info exists charset] } {
        catch {set rxbody [encoding convertto $charset $rxbody]} errmsg
    }

    # Send back the data
    send_data req --status=201 --header [list "Content-Type" $contentType] -- $rxbody
}


proc send_response { request status } {
    global pages
    upvar $request req

    if { [info exists pages($status)] } {
        set file $pages($status)
        send_file req $file
    } else {
        set text $::status_code($status)
        send_data req --status=$status -- "$status $text\n"
    }
}


proc send_file { request file } {
    global opts
    global sess
    global pages
    global mime_type
    upvar $request req
    set chan $req(channel)
    set fullpath [file join $opts(basepath) [safe_path $file]]
    set contentType "text/plain"
    set extraHeaders ""
    set status 200

    # URL to directory
    if { [file isdirectory $fullpath] } {
        # If the URL ends in /, send index.html
        if { [string match "*/" $file] } {
            set fullpath [file join $fullpath $pages(200)]

        # Otherwise redirect to the URL with the / suffix so the relative paths
        # referenced by the index.html resolve correctly.
        } else {
            send_data req --status=301 --header [list "Location" "$req(url)/"] "301 Moved Permanently\n"
            return
        }
    }

    # Open the file - if we can
    if { [catch { set ifs [open $fullpath rb] } errmsg] } {
        if { $file ne $pages(404) } {
            send_response req 404
        } else {
            send_data req --status=404 "404 Not Found\n"
        }

        return
    }

    # Determine content-type
    set ext [file extension $fullpath]
    if { [info exists mime_type($ext)] } {
        set contentType $mime_type($ext)
    }

    # Determine the content-length
    set contentLength [file size $fullpath]

    # Handle the range request, if any
    set range [get_range req $contentLength]
    if { [string length $range] } {
        lassign $range range_start range_end

        set status 206
        set contentRange "bytes $range_start-$range_end/$contentLength"
        set contentLength [expr $range_end - $range_start + 1]
        set extraHeaders [list \
            "Content-Range" $contentRange \
        ]

        seek $ifs $range_start
    }

    # Send the header
    send_data req --status=$status --header=[list \
        "Content-Type" $contentType \
        "Content-Length" $contentLength \
        "Accept-Ranges" "bytes" \
        {*}$extraHeaders \
    ]

    # Send the body
    set sess($chan|keep_open) 1
    fcopy $ifs $chan -size $contentLength -command [list on_file_sent $ifs $chan]
}


proc get_range { request contentLength } {
    upvar $request req
    set int_t integer

    # Tcl 8.5+ supports wideinteger
    if { $::tcl_version >= 8.5 } {
        set int_t wideinteger
    }

    # If no range header, return no range
    if { ! [info exists req(header|range)] } return

    # Validate the range is in "bytes=<range>" format
    lassign [split $req(header|range) "="] bytes range
    if { $bytes ne "bytes" } return

    # We don't support multipart ranges
    set ranges [split $range ","]
    if { [llength $ranges] > 1 } return

    # Range should only have 2 parts
    set range [split $range "-"]
    if { [llength $range] > 2 } return

    # Validate the parts.  We accept:
    #   <start>-
    #   <start>-<end>
    #   -<end>
    lassign $range start end
    if { ! [string length $end] } { set end [expr $contentLength - 1] }
    if { ! [string length $start] } { set start [expr $contentLength - $end] }
    if { ! [string is $int_t $start] } return
    if { ! [string is $int_t $end] } return

    # Return the two parts
    return [list $start $end]
}


proc on_file_sent { ifs chan size { errmsg "" } } {
    global sess

    # Clean up
    unset sess($chan|keep_open)
    close $ifs
    close $chan
}


proc send_data { args } {
    global status_code
    set status 200
    set header [list "Content-Type" "text/plain"]

    while { 1 } {
        set c [getopt $args "status 1 header 1"]
        if { $c == -1 } break

        switch -exact -- $c {
            status { set status $optarg }
            header { set header $optarg }

            - {
                if { ! [info exists request] } {
                    set request $optarg
                } elseif { ! [info exists body] } {
                    set body $optarg
                } else {
                    return -code error "Too many arguments -- $optarg"
                }
            }
        }
    }

    upvar $request req
    set chan $req(channel)
    set status_text $status_code($status)

    # Send header
    puts $chan "HTTP/1.0 $status $status_text\r"
    foreach { name value } $header {
        puts $chan "$name: $value\r"
    }

    # Empty line between header and body
    puts $chan "\r"

    # Send body
    if { [info exists body] } {
        puts -nonewline $chan $body
    }
}


###########################################################################
# UTILITY FUNCTIONS

proc safe_path { path } {
    set safe [list]

    foreach dir [split $path "/"] {
        # Strip leading periods
        regsub {^[.]*} $dir "" dir

        if { $dir ne "" } {
            lappend safe $dir
        }
    }

    return [join $safe "/"]
}


proc api_put { name value } {
    global api

    if { [info exists api(data|$name)] } {
        incr api(usage) -[string length "$name|$api(data|$name)\0"]
    }

    incr api(usage) [string length "$name|$value\0"]
    set api(data|$name) $value
}


proc api_delete { name } {
    global api

    if { [info exists api(data|$name)] } {
        incr api(usage) -[string length "$name|$api(data|$name)\0"]
        unset api(data|$name)
    }
}


proc api_usageof { name } {
    global api
    set usage 0

    if { [info exists api(data|$name)] } {
        set usage [string length "$name|$api(data|$name)\0"]
    }

    return $usage
}


proc api_load { } {
    global api

    if { [file exists $api(store)] } {
        catch {
            set fd [open $api(store) rb]
            set bytes [read $fd]
            set jsondict [json::json2dict $bytes]

            foreach { name value } $jsondict {
                api_put $name $value
            }

            close $fd
        } err

        if { [string length $err] } {
            puts stderr $err
            return 0
        }
    }

    return 1
}


proc api_save { } {
    global api
    set jsondict ""

    # Prepare json
    foreach { key value } [array get api "data|*"] {
        set name [string range $key 5 end]

        dict append jsondict $name [json::write string $value]
    }

    # Write json
    catch {
        set tmpfile ""
        set fd [file tempfile tmpfile $api(store)]
        puts $fd [json::write object {*}$jsondict]
        close $fd

        file rename -force $tmpfile $api(store)
    } err

    if { [string length $err] } {
        puts stderr $err
        return 0
    }

    return 1
}


proc api_getjson { prefix } {
    global api
    set jsondict ""
    set length [string length "data|$prefix"]

    # Prepare json
    foreach { key value } [array get api "data|$prefix*"] {
        set name [string range $key $length end]

        dict append jsondict $name [json::write string $value]
    }

    return [json::write object {*}$jsondict]
}


proc api_ispath { path } {
    global api

    if { [string match "$api(path)/*" "$path"] || $api(path) eq $path } {
        return 1
    }

    return 0
}


proc api_pathname { path } {
    global api

    if { [api_ispath $path] } {
        set len [string length "$api(path)/"]

        return [string range $path $len end]
    }

    return ""
}


# From http://wiki.tcl.tk/14144
proc url_encode { string } {
    variable map
    variable alphanumeric

    # The spec says: "non-alphanumeric characters are replaced by '%HH'"
    # 1 leave alphanumerics characters alone
    # 2 Convert every other character to an array lookup
    # 3 Escape constructs that are "special" to the tcl parser
    # 4 "subst" the result, doing all the array substitutions

    regsub -all \[^$alphanumeric\] $string {$map(&)} string
    # This quotes cases like $map([) or $map($) => $map(\[) ...
    regsub -all {[][{})\\]\)} $string {\\&} string
    return [subst -nocommand $string]
}


# From http://wiki.tcl.tk/14144
proc url_decode { str } {
    # rewrite "+" back to space
    # protect \ from quoting another '\'
    set str [string map [list + { } "\\" "\\\\"] $str]

    # prepare to process all %-escapes
    regsub -all -- {%([A-Fa-f0-9][A-Fa-f0-9])} $str {\\u00\1} str

    # process \u unicode mapped chars
    return [subst -novar -nocommand $str]
}


###########################################################################
# VALIDATION FUNCTIONS

proc is_port { val } {
    return [expr [string is integer $val] && $val > 0 && $val <= 65535]
}


proc is_dir { path } {
    return [file isdirectory $path]
}


###########################################################################
# CONSTANTS

set status_code(100)    "Continue"
set status_code(101)    "Switching Protocols"
set status_code(200)    "OK"
set status_code(201)    "Created"
set status_code(202)    "Accepted"
set status_code(203)    "Non-Authoritative Information"
set status_code(204)    "No Content"
set status_code(205)    "Reset Content"
set status_code(206)    "Partial Content"
set status_code(300)    "Multiple Choices"
set status_code(301)    "Moved Permanently"
set status_code(302)    "Found"
set status_code(303)    "See Other"
set status_code(304)    "Not Modified"
set status_code(305)    "Use Proxy"
set status_code(306)    "(Unused)"
set status_code(307)    "Temporary Redirect"
set status_code(400)    "Bad Request"
set status_code(401)    "Unauthorized"
set status_code(402)    "Payment Required"
set status_code(403)    "Forbidden"
set status_code(404)    "Not Found"
set status_code(405)    "Method Not Allowed"
set status_code(406)    "Not Acceptable"
set status_code(407)    "Proxy Authentication Required"
set status_code(408)    "Request Timeout"
set status_code(409)    "Conflict"
set status_code(410)    "Gone"
set status_code(411)    "Length Required"
set status_code(412)    "Precondition Failed"
set status_code(413)    "Request Entity Too Large"
set status_code(414)    "Request-URI Too Long"
set status_code(415)    "Unsupported Media Type"
set status_code(416)    "Requested Range Not Satisfiable"
set status_code(417)    "Expectation Failed"
set status_code(500)    "Internal Server Error"
set status_code(501)    "Not Implemented"
set status_code(502)    "Bad Gateway"
set status_code(503)    "Service Unavailable"
set status_code(504)    "Gateway Timeout"
set status_code(505)    "HTTP Version Not Supported"

set mime_type(.123)         "application/vnd.lotus-1-2-3"
set mime_type(.3dml)        "text/vnd.in3d.3dml"
set mime_type(.3g2)         "video/3gpp2"
set mime_type(.3gp)         "video/3gpp"
set mime_type(.7z)          "application/x-7z-compressed"
set mime_type(.aab)         "application/x-authorware-bin"
set mime_type(.aac)         "audio/aac"
set mime_type(.aam)         "application/x-authorware-map"
set mime_type(.aas)         "application/x-authorware-seg"
set mime_type(.abw)         "application/x-abiword"
set mime_type(.ac)          "application/pkix-attr-cert"
set mime_type(.acc)         "application/vnd.americandynamics.acc"
set mime_type(.ace)         "application/x-ace-compressed"
set mime_type(.acu)         "application/vnd.acucobol"
set mime_type(.adp)         "audio/adpcm"
set mime_type(.aep)         "application/vnd.audiograph"
set mime_type(.afp)         "application/vnd.ibm.modcap"
set mime_type(.ahead)       "application/vnd.ahead.space"
set mime_type(.ai)          "application/postscript"
set mime_type(.aif)         "audio/x-aiff"
set mime_type(.air)         "application/vnd.adobe.air-application-installer-package+zip"
set mime_type(.ait)         "application/vnd.dvb.ait"
set mime_type(.ami)         "application/vnd.amiga.ami"
set mime_type(.apk)         "application/vnd.android.package-archive"
set mime_type(.application) "application/x-ms-application"
set mime_type(.apr)         "application/vnd.lotus-approach"
set mime_type(.arc)         "application/octet-stream"
set mime_type(.asf)         "video/x-ms-asf"
set mime_type(.aso)         "application/vnd.accpac.simply.aso"
set mime_type(.atc)         "application/vnd.acucorp"
set mime_type(.atom)        "application/atom+xml"
set mime_type(.atomcat)     "application/atomcat+xml"
set mime_type(.atomsvc)     "application/atomsvc+xml"
set mime_type(.atx)         "application/vnd.antix.game-component"
set mime_type(.au)          "audio/basic"
set mime_type(.avi)         "video/x-msvideo"
set mime_type(.aw)          "application/applixware"
set mime_type(.azf)         "application/vnd.airzip.filesecure.azf"
set mime_type(.azs)         "application/vnd.airzip.filesecure.azs"
set mime_type(.azw)         "application/vnd.amazon.ebook"
set mime_type(.bcpio)       "application/x-bcpio"
set mime_type(.bdf)         "application/x-font-bdf"
set mime_type(.bdm)         "application/vnd.syncml.dm+wbxml"
set mime_type(.bed)         "application/vnd.realvnc.bed"
set mime_type(.bh2)         "application/vnd.fujitsu.oasysprs"
set mime_type(.bin)         "application/octet-stream"
set mime_type(.bmi)         "application/vnd.bmi"
set mime_type(.bmp)         "image/bmp"
set mime_type(.box)         "application/vnd.previewsystems.box"
set mime_type(.btif)        "image/prs.btif"
set mime_type(.bz)          "application/x-bzip"
set mime_type(.bz2)         "application/x-bzip2"
set mime_type(.c)           "text/x-c"
set mime_type(.c11amc)      "application/vnd.cluetrust.cartomobile-config"
set mime_type(.c11amz)      "application/vnd.cluetrust.cartomobile-config-pkg"
set mime_type(.c4g)         "application/vnd.clonk.c4group"
set mime_type(.cab)         "application/vnd.ms-cab-compressed"
set mime_type(.car)         "application/vnd.curl.car"
set mime_type(.cat)         "application/vnd.ms-pki.seccat"
set mime_type(.ccxml)       "application/ccxml+xml,"
set mime_type(.cdbcmsg)     "application/vnd.contact.cmsg"
set mime_type(.cdkey)       "application/vnd.mediastation.cdkey"
set mime_type(.cdmia)       "application/cdmi-capability"
set mime_type(.cdmic)       "application/cdmi-container"
set mime_type(.cdmid)       "application/cdmi-domain"
set mime_type(.cdmio)       "application/cdmi-object"
set mime_type(.cdmiq)       "application/cdmi-queue"
set mime_type(.cdx)         "chemical/x-cdx"
set mime_type(.cdxml)       "application/vnd.chemdraw+xml"
set mime_type(.cdy)         "application/vnd.cinderella"
set mime_type(.cer)         "application/pkix-cert"
set mime_type(.cgm)         "image/cgm"
set mime_type(.chat)        "application/x-chat"
set mime_type(.chm)         "application/vnd.ms-htmlhelp"
set mime_type(.chrt)        "application/vnd.kde.kchart"
set mime_type(.cif)         "chemical/x-cif"
set mime_type(.cii)         "application/vnd.anser-web-certificate-issue-initiation"
set mime_type(.cil)         "application/vnd.ms-artgalry"
set mime_type(.cla)         "application/vnd.claymore"
set mime_type(.class)       "application/java-vm"
set mime_type(.clkk)        "application/vnd.crick.clicker.keyboard"
set mime_type(.clkp)        "application/vnd.crick.clicker.palette"
set mime_type(.clkt)        "application/vnd.crick.clicker.template"
set mime_type(.clkw)        "application/vnd.crick.clicker.wordbank"
set mime_type(.clkx)        "application/vnd.crick.clicker"
set mime_type(.clp)         "application/x-msclip"
set mime_type(.cmc)         "application/vnd.cosmocaller"
set mime_type(.cmdf)        "chemical/x-cmdf"
set mime_type(.cml)         "chemical/x-cml"
set mime_type(.cmp)         "application/vnd.yellowriver-custom-menu"
set mime_type(.cmx)         "image/x-cmx"
set mime_type(.cod)         "application/vnd.rim.cod"
set mime_type(.cpio)        "application/x-cpio"
set mime_type(.cpt)         "application/mac-compactpro"
set mime_type(.crd)         "application/x-mscardfile"
set mime_type(.crl)         "application/pkix-crl"
set mime_type(.cryptonote)  "application/vnd.rig.cryptonote"
set mime_type(.csh)         "application/x-csh"
set mime_type(.csml)        "chemical/x-csml"
set mime_type(.csp)         "application/vnd.commonspace"
set mime_type(.css)         "text/css"
set mime_type(.csv)         "text/csv"
set mime_type(.cu)          "application/cu-seeme"
set mime_type(.curl)        "text/vnd.curl"
set mime_type(.cww)         "application/prs.cww"
set mime_type(.dae)         "model/vnd.collada+xml"
set mime_type(.daf)         "application/vnd.mobius.daf"
set mime_type(.davmount)    "application/davmount+xml"
set mime_type(.dcurl)       "text/vnd.curl.dcurl"
set mime_type(.dd2)         "application/vnd.oma.dd2+xml"
set mime_type(.ddd)         "application/vnd.fujixerox.ddd"
set mime_type(.deb)         "application/x-debian-package"
set mime_type(.der)         "application/x-x509-ca-cert"
set mime_type(.dfac)        "application/vnd.dreamfactory"
set mime_type(.dir)         "application/x-director"
set mime_type(.dis)         "application/vnd.mobius.dis"
set mime_type(.djvu)        "image/vnd.djvu"
set mime_type(.dmg)         "application/x-apple-diskimage"
set mime_type(.dna)         "application/vnd.dna"
set mime_type(.doc)         "application/msword"
set mime_type(.docm)        "application/vnd.ms-word.document.macroenabled.12"
set mime_type(.docx)        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
set mime_type(.dotm)        "application/vnd.ms-word.template.macroenabled.12"
set mime_type(.dotx)        "application/vnd.openxmlformats-officedocument.wordprocessingml.template"
set mime_type(.dp)          "application/vnd.osgi.dp"
set mime_type(.dpg)         "application/vnd.dpgraph"
set mime_type(.dra)         "audio/vnd.dra"
set mime_type(.dsc)         "text/prs.lines.tag"
set mime_type(.dssc)        "application/dssc+der"
set mime_type(.dtb)         "application/x-dtbook+xml"
set mime_type(.dtd)         "application/xml-dtd"
set mime_type(.dts)         "audio/vnd.dts"
set mime_type(.dtshd)       "audio/vnd.dts.hd"
set mime_type(.dvi)         "application/x-dvi"
set mime_type(.dwf)         "model/vnd.dwf"
set mime_type(.dwg)         "image/vnd.dwg"
set mime_type(.dxf)         "image/vnd.dxf"
set mime_type(.dxp)         "application/vnd.spotfire.dxp"
set mime_type(.ecelp4800)   "audio/vnd.nuera.ecelp4800"
set mime_type(.ecelp7470)   "audio/vnd.nuera.ecelp7470"
set mime_type(.ecelp9600)   "audio/vnd.nuera.ecelp9600"
set mime_type(.edm)         "application/vnd.novadigm.edm"
set mime_type(.edx)         "application/vnd.novadigm.edx"
set mime_type(.efif)        "application/vnd.picsel"
set mime_type(.ei6)         "application/vnd.pg.osasli"
set mime_type(.eml)         "message/rfc822"
set mime_type(.emma)        "application/emma+xml"
set mime_type(.eol)         "audio/vnd.digital-winds"
set mime_type(.eot)         "application/vnd.ms-fontobject"
set mime_type(.epub)        "application/epub+zip"
set mime_type(.es)          "application/ecmascript"
set mime_type(.es3)         "application/vnd.eszigno3+xml"
set mime_type(.esf)         "application/vnd.epson.esf"
set mime_type(.etx)         "text/x-setext"
set mime_type(.exe)         "application/x-msdownload"
set mime_type(.exi)         "application/exi"
set mime_type(.ext)         "application/vnd.novadigm.ext"
set mime_type(.ez2)         "application/vnd.ezpix-album"
set mime_type(.ez3)         "application/vnd.ezpix-package"
set mime_type(.f)           "text/x-fortran"
set mime_type(.f4v)         "video/x-f4v"
set mime_type(.fbs)         "image/vnd.fastbidsheet"
set mime_type(.fcs)         "application/vnd.isac.fcs"
set mime_type(.fdf)         "application/vnd.fdf"
set mime_type(.fe_launch)   "application/vnd.denovo.fcselayout-link"
set mime_type(.fg5)         "application/vnd.fujitsu.oasysgp"
set mime_type(.fh)          "image/x-freehand"
set mime_type(.fig)         "application/x-xfig"
set mime_type(.fli)         "video/x-fli"
set mime_type(.flo)         "application/vnd.micrografx.flo"
set mime_type(.flv)         "video/x-flv"
set mime_type(.flw)         "application/vnd.kde.kivio"
set mime_type(.flx)         "text/vnd.fmi.flexstor"
set mime_type(.fly)         "text/vnd.fly"
set mime_type(.fm)          "application/vnd.framemaker"
set mime_type(.fnc)         "application/vnd.frogans.fnc"
set mime_type(.fpx)         "image/vnd.fpx"
set mime_type(.fsc)         "application/vnd.fsc.weblaunch"
set mime_type(.fst)         "image/vnd.fst"
set mime_type(.ftc)         "application/vnd.fluxtime.clip"
set mime_type(.fti)         "application/vnd.anser-web-funds-transfer-initiation"
set mime_type(.fvt)         "video/vnd.fvt"
set mime_type(.fxp)         "application/vnd.adobe.fxp"
set mime_type(.fzs)         "application/vnd.fuzzysheet"
set mime_type(.g2w)         "application/vnd.geoplan"
set mime_type(.g3)          "image/g3fax"
set mime_type(.g3w)         "application/vnd.geospace"
set mime_type(.gac)         "application/vnd.groove-account"
set mime_type(.gdl)         "model/vnd.gdl"
set mime_type(.geo)         "application/vnd.dynageo"
set mime_type(.gex)         "application/vnd.geometry-explorer"
set mime_type(.ggb)         "application/vnd.geogebra.file"
set mime_type(.ggt)         "application/vnd.geogebra.tool"
set mime_type(.ghf)         "application/vnd.groove-help"
set mime_type(.gif)         "image/gif"
set mime_type(.gim)         "application/vnd.groove-identity-message"
set mime_type(.gmx)         "application/vnd.gmx"
set mime_type(.gnumeric)    "application/x-gnumeric"
set mime_type(.gph)         "application/vnd.flographit"
set mime_type(.gqf)         "application/vnd.grafeq"
set mime_type(.gram)        "application/srgs"
set mime_type(.grv)         "application/vnd.groove-injector"
set mime_type(.grxml)       "application/srgs+xml"
set mime_type(.gsf)         "application/x-font-ghostscript"
set mime_type(.gtar)        "application/x-gtar"
set mime_type(.gtm)         "application/vnd.groove-tool-message"
set mime_type(.gtw)         "model/vnd.gtw"
set mime_type(.gv)          "text/vnd.graphviz"
set mime_type(.gxt)         "application/vnd.geonext"
set mime_type(.h261)        "video/h261"
set mime_type(.h263)        "video/h263"
set mime_type(.h264)        "video/h264"
set mime_type(.hal)         "application/vnd.hal+xml"
set mime_type(.hbci)        "application/vnd.hbci"
set mime_type(.hdf)         "application/x-hdf"
set mime_type(.hlp)         "application/winhlp"
set mime_type(.hpgl)        "application/vnd.hp-hpgl"
set mime_type(.hpid)        "application/vnd.hp-hpid"
set mime_type(.hps)         "application/vnd.hp-hps"
set mime_type(.hqx)         "application/mac-binhex40"
set mime_type(.htke)        "application/vnd.kenameaapp"
set mime_type(.htm)         "text/html"
set mime_type(.html)        "text/html"
set mime_type(.hvd)         "application/vnd.yamaha.hv-dic"
set mime_type(.hvp)         "application/vnd.yamaha.hv-voice"
set mime_type(.hvs)         "application/vnd.yamaha.hv-script"
set mime_type(.i2g)         "application/vnd.intergeo"
set mime_type(.icc)         "application/vnd.iccprofile"
set mime_type(.ice)         "x-conference/x-cooltalk"
set mime_type(.ico)         "image/x-icon"
set mime_type(.ics)         "text/calendar"
set mime_type(.ief)         "image/ief"
set mime_type(.ifm)         "application/vnd.shana.informed.formdata"
set mime_type(.igl)         "application/vnd.igloader"
set mime_type(.igm)         "application/vnd.insors.igm"
set mime_type(.igs)         "model/iges"
set mime_type(.igx)         "application/vnd.micrografx.igx"
set mime_type(.iif)         "application/vnd.shana.informed.interchange"
set mime_type(.imp)         "application/vnd.accpac.simply.imp"
set mime_type(.ims)         "application/vnd.ms-ims"
set mime_type(.ipfix)       "application/ipfix"
set mime_type(.ipk)         "application/vnd.shana.informed.package"
set mime_type(.irm)         "application/vnd.ibm.rights-management"
set mime_type(.irp)         "application/vnd.irepository.package+xml"
set mime_type(.itp)         "application/vnd.shana.informed.formtemplate"
set mime_type(.ivp)         "application/vnd.immervision-ivp"
set mime_type(.ivu)         "application/vnd.immervision-ivu"
set mime_type(.jad)         "text/vnd.sun.j2me.app-descriptor"
set mime_type(.jam)         "application/vnd.jam"
set mime_type(.jar)         "application/java-archive"
set mime_type(.java)        "text/x-java-source,java"
set mime_type(.jisp)        "application/vnd.jisp"
set mime_type(.jlt)         "application/vnd.hp-jlyt"
set mime_type(.jnlp)        "application/x-java-jnlp-file"
set mime_type(.joda)        "application/vnd.joost.joda-archive"
set mime_type(.jpeg)        "image/jpeg"
set mime_type(.jpg)         "image/jpeg"
set mime_type(.jpgv)        "video/jpeg"
set mime_type(.jpm)         "video/jpm"
set mime_type(.js)          "application/javascript"
set mime_type(.json)        "application/json"
set mime_type(.karbon)      "application/vnd.kde.karbon"
set mime_type(.kfo)         "application/vnd.kde.kformula"
set mime_type(.kia)         "application/vnd.kidspiration"
set mime_type(.kml)         "application/vnd.google-earth.kml+xml"
set mime_type(.kmz)         "application/vnd.google-earth.kmz"
set mime_type(.kne)         "application/vnd.kinar"
set mime_type(.kon)         "application/vnd.kde.kontour"
set mime_type(.kpr)         "application/vnd.kde.kpresenter"
set mime_type(.ksp)         "application/vnd.kde.kspread"
set mime_type(.ktx)         "image/ktx"
set mime_type(.ktz)         "application/vnd.kahootz"
set mime_type(.kwd)         "application/vnd.kde.kword"
set mime_type(.lasxml)      "application/vnd.las.las+xml"
set mime_type(.latex)       "application/x-latex"
set mime_type(.lbd)         "application/vnd.llamagraphics.life-balance.desktop"
set mime_type(.lbe)         "application/vnd.llamagraphics.life-balance.exchange+xml"
set mime_type(.les)         "application/vnd.hhe.lesson-player"
set mime_type(.link66)      "application/vnd.route66.link66+xml"
set mime_type(.lrm)         "application/vnd.ms-lrm"
set mime_type(.ltf)         "application/vnd.frogans.ltf"
set mime_type(.lvp)         "audio/vnd.lucent.voice"
set mime_type(.lwp)         "application/vnd.lotus-wordpro"
set mime_type(.m21)         "application/mp21"
set mime_type(.m3u)         "audio/x-mpegurl"
set mime_type(.m3u8)        "application/vnd.apple.mpegurl"
set mime_type(.m4v)         "video/x-m4v"
set mime_type(.ma)          "application/mathematica"
set mime_type(.mads)        "application/mads+xml"
set mime_type(.mag)         "application/vnd.ecowin.chart"
set mime_type(.mathml)      "application/mathml+xml"
set mime_type(.mbk)         "application/vnd.mobius.mbk"
set mime_type(.mbox)        "application/mbox"
set mime_type(.mc1)         "application/vnd.medcalcdata"
set mime_type(.mcd)         "application/vnd.mcd"
set mime_type(.mcurl)       "text/vnd.curl.mcurl"
set mime_type(.mdb)         "application/x-msaccess"
set mime_type(.mdi)         "image/vnd.ms-modi"
set mime_type(.meta4)       "application/metalink4+xml"
set mime_type(.mets)        "application/mets+xml"
set mime_type(.mfm)         "application/vnd.mfmp"
set mime_type(.mgp)         "application/vnd.osgeo.mapguide.package"
set mime_type(.mgz)         "application/vnd.proteus.magazine"
set mime_type(.mid)         "audio/midi"
set mime_type(.midi)        "audio/midi"
set mime_type(.mif)         "application/vnd.mif"
set mime_type(.mj2)         "video/mj2"
set mime_type(.mjs)         "application/javascript"
set mime_type(.mlp)         "application/vnd.dolby.mlp"
set mime_type(.mmd)         "application/vnd.chipnuts.karaoke-mmd"
set mime_type(.mmf)         "application/vnd.smaf"
set mime_type(.mmr)         "image/vnd.fujixerox.edmics-mmr"
set mime_type(.mny)         "application/x-msmoney"
set mime_type(.mods)        "application/mods+xml"
set mime_type(.movie)       "video/x-sgi-movie"
set mime_type(.mp4)         "video/mp4"
set mime_type(.mp4a)        "audio/mp4"
set mime_type(.mpc)         "application/vnd.mophun.certificate"
set mime_type(.mpeg)        "video/mpeg"
set mime_type(.mpga)        "audio/mpeg"
set mime_type(.mpkg)        "application/vnd.apple.installer+xml"
set mime_type(.mpm)         "application/vnd.blueice.multipass"
set mime_type(.mpn)         "application/vnd.mophun.application"
set mime_type(.mpp)         "application/vnd.ms-project"
set mime_type(.mpy)         "application/vnd.ibm.minipay"
set mime_type(.mqy)         "application/vnd.mobius.mqy"
set mime_type(.mrc)         "application/marc"
set mime_type(.mrcx)        "application/marcxml+xml"
set mime_type(.mscml)       "application/mediaservercontrol+xml"
set mime_type(.mseq)        "application/vnd.mseq"
set mime_type(.msf)         "application/vnd.epson.msf"
set mime_type(.msh)         "model/mesh"
set mime_type(.msl)         "application/vnd.mobius.msl"
set mime_type(.msty)        "application/vnd.muvee.style"
set mime_type(.mts)         "model/vnd.mts"
set mime_type(.mus)         "application/vnd.musician"
set mime_type(.musicxml)    "application/vnd.recordare.musicxml+xml"
set mime_type(.mvb)         "application/x-msmediaview"
set mime_type(.mwf)         "application/vnd.mfer"
set mime_type(.mxf)         "application/mxf"
set mime_type(.mxl)         "application/vnd.recordare.musicxml"
set mime_type(.mxml)        "application/xv+xml"
set mime_type(.mxs)         "application/vnd.triscape.mxs"
set mime_type(.mxu)         "video/vnd.mpegurl"
set mime_type(.n-gage)      "application/vnd.nokia.n-gage.symbian.install"
set mime_type(.n3)          "text/n3"
set mime_type(.nbp)         "application/vnd.wolfram.player"
set mime_type(.nc)          "application/x-netcdf"
set mime_type(.ncx)         "application/x-dtbncx+xml"
set mime_type(.ngdat)       "application/vnd.nokia.n-gage.data"
set mime_type(.nlu)         "application/vnd.neurolanguage.nlu"
set mime_type(.nml)         "application/vnd.enliven"
set mime_type(.nnd)         "application/vnd.noblenet-directory"
set mime_type(.nns)         "application/vnd.noblenet-sealer"
set mime_type(.nnw)         "application/vnd.noblenet-web"
set mime_type(.npx)         "image/vnd.net-fpx"
set mime_type(.nsf)         "application/vnd.lotus-notes"
set mime_type(.oa2)         "application/vnd.fujitsu.oasys2"
set mime_type(.oa3)         "application/vnd.fujitsu.oasys3"
set mime_type(.oas)         "application/vnd.fujitsu.oasys"
set mime_type(.obd)         "application/x-msbinder"
set mime_type(.oda)         "application/oda"
set mime_type(.odb)         "application/vnd.oasis.opendocument.database"
set mime_type(.odc)         "application/vnd.oasis.opendocument.chart"
set mime_type(.odf)         "application/vnd.oasis.opendocument.formula"
set mime_type(.odft)        "application/vnd.oasis.opendocument.formula-template"
set mime_type(.odg)         "application/vnd.oasis.opendocument.graphics"
set mime_type(.odi)         "application/vnd.oasis.opendocument.image"
set mime_type(.odm)         "application/vnd.oasis.opendocument.text-master"
set mime_type(.odp)         "application/vnd.oasis.opendocument.presentation"
set mime_type(.ods)         "application/vnd.oasis.opendocument.spreadsheet"
set mime_type(.odt)         "application/vnd.oasis.opendocument.text"
set mime_type(.oga)         "audio/ogg"
set mime_type(.ogv)         "video/ogg"
set mime_type(.ogx)         "application/ogg"
set mime_type(.onetoc)      "application/onenote"
set mime_type(.opf)         "application/oebps-package+xml"
set mime_type(.org)         "application/vnd.lotus-organizer"
set mime_type(.osf)         "application/vnd.yamaha.openscoreformat"
set mime_type(.osfpvg)      "application/vnd.yamaha.openscoreformat.osfpvg+xml"
set mime_type(.otc)         "application/vnd.oasis.opendocument.chart-template"
set mime_type(.otf)         "application/x-font-opentype"
set mime_type(.otg)         "application/vnd.oasis.opendocument.graphics-template"
set mime_type(.oth)         "application/vnd.oasis.opendocument.text-web"
set mime_type(.oti)         "application/vnd.oasis.opendocument.image-template"
set mime_type(.otp)         "application/vnd.oasis.opendocument.presentation-template"
set mime_type(.ots)         "application/vnd.oasis.opendocument.spreadsheet-template"
set mime_type(.ott)         "application/vnd.oasis.opendocument.text-template"
set mime_type(.oxt)         "application/vnd.openofficeorg.extension"
set mime_type(.p)           "text/x-pascal"
set mime_type(.p10)         "application/pkcs10"
set mime_type(.p12)         "application/x-pkcs12"
set mime_type(.p7b)         "application/x-pkcs7-certificates"
set mime_type(.p7m)         "application/pkcs7-mime"
set mime_type(.p7r)         "application/x-pkcs7-certreqresp"
set mime_type(.p7s)         "application/pkcs7-signature"
set mime_type(.p8)          "application/pkcs8"
set mime_type(.par)         "text/plain-bas"
set mime_type(.paw)         "application/vnd.pawaafile"
set mime_type(.pbd)         "application/vnd.powerbuilder6"
set mime_type(.pbm)         "image/x-portable-bitmap"
set mime_type(.pcf)         "application/x-font-pcf"
set mime_type(.pcl)         "application/vnd.hp-pcl"
set mime_type(.pclxl)       "application/vnd.hp-pclxl"
set mime_type(.pcurl)       "application/vnd.curl.pcurl"
set mime_type(.pcx)         "image/x-pcx"
set mime_type(.pdb)         "application/vnd.palm"
set mime_type(.pdf)         "application/pdf"
set mime_type(.pfa)         "application/x-font-type1"
set mime_type(.pfr)         "application/font-tdpfr"
set mime_type(.pgm)         "image/x-portable-graymap"
set mime_type(.pgn)         "application/x-chess-pgn"
set mime_type(.pgp)         "application/pgp-encrypted"
set mime_type(.pic)         "image/x-pict"
set mime_type(.pjpeg)       "image/pjpeg"
set mime_type(.pki)         "application/pkixcmp"
set mime_type(.pkipath)     "application/pkix-pkipath"
set mime_type(.plb)         "application/vnd.3gpp.pic-bw-large"
set mime_type(.plc)         "application/vnd.mobius.plc"
set mime_type(.plf)         "application/vnd.pocketlearn"
set mime_type(.pls)         "application/pls+xml"
set mime_type(.pml)         "application/vnd.ctc-posml"
set mime_type(.png)         "image/png"
set mime_type(.pnm)         "image/x-portable-anymap"
set mime_type(.portpkg)     "application/vnd.macports.portpkg"
set mime_type(.potm)        "application/vnd.ms-powerpoint.template.macroenabled.12"
set mime_type(.potx)        "application/vnd.openxmlformats-officedocument.presentationml.template"
set mime_type(.ppam)        "application/vnd.ms-powerpoint.addin.macroenabled.12"
set mime_type(.ppd)         "application/vnd.cups-ppd"
set mime_type(.ppm)         "image/x-portable-pixmap"
set mime_type(.ppsm)        "application/vnd.ms-powerpoint.slideshow.macroenabled.12"
set mime_type(.ppsx)        "application/vnd.openxmlformats-officedocument.presentationml.slideshow"
set mime_type(.ppt)         "application/vnd.ms-powerpoint"
set mime_type(.pptm)        "application/vnd.ms-powerpoint.presentation.macroenabled.12"
set mime_type(.pptx)        "application/vnd.openxmlformats-officedocument.presentationml.presentation"
set mime_type(.prc)         "application/x-mobipocket-ebook"
set mime_type(.pre)         "application/vnd.lotus-freelance"
set mime_type(.prf)         "application/pics-rules"
set mime_type(.psb)         "application/vnd.3gpp.pic-bw-small"
set mime_type(.psd)         "image/vnd.adobe.photoshop"
set mime_type(.psf)         "application/x-font-linux-psf"
set mime_type(.pskcxml)     "application/pskc+xml"
set mime_type(.ptid)        "application/vnd.pvi.ptid1"
set mime_type(.pub)         "application/x-mspublisher"
set mime_type(.pvb)         "application/vnd.3gpp.pic-bw-var"
set mime_type(.pwn)         "application/vnd.3m.post-it-notes"
set mime_type(.pya)         "audio/vnd.ms-playready.media.pya"
set mime_type(.pyv)         "video/vnd.ms-playready.media.pyv"
set mime_type(.qam)         "application/vnd.epson.quickanime"
set mime_type(.qbo)         "application/vnd.intu.qbo"
set mime_type(.qfx)         "application/vnd.intu.qfx"
set mime_type(.qps)         "application/vnd.publishare-delta-tree"
set mime_type(.qt)          "video/quicktime"
set mime_type(.qxd)         "application/vnd.quark.quarkxpress"
set mime_type(.ram)         "audio/x-pn-realaudio"
set mime_type(.rar)         "application/x-rar-compressed"
set mime_type(.ras)         "image/x-cmu-raster"
set mime_type(.rcprofile)   "application/vnd.ipunplugged.rcprofile"
set mime_type(.rdf)         "application/rdf+xml"
set mime_type(.rdz)         "application/vnd.data-vision.rdz"
set mime_type(.rep)         "application/vnd.businessobjects"
set mime_type(.res)         "application/x-dtbresource+xml"
set mime_type(.rgb)         "image/x-rgb"
set mime_type(.rif)         "application/reginfo+xml"
set mime_type(.rip)         "audio/vnd.rip"
set mime_type(.rl)          "application/resource-lists+xml"
set mime_type(.rlc)         "image/vnd.fujixerox.edmics-rlc"
set mime_type(.rld)         "application/resource-lists-diff+xml"
set mime_type(.rm)          "application/vnd.rn-realmedia"
set mime_type(.rmp)         "audio/x-pn-realaudio-plugin"
set mime_type(.rms)         "application/vnd.jcp.javame.midlet-rms"
set mime_type(.rnc)         "application/relax-ng-compact-syntax"
set mime_type(.rp9)         "application/vnd.cloanto.rp9"
set mime_type(.rpss)        "application/vnd.nokia.radio-presets"
set mime_type(.rpst)        "application/vnd.nokia.radio-preset"
set mime_type(.rq)          "application/sparql-query"
set mime_type(.rs)          "application/rls-services+xml"
set mime_type(.rsd)         "application/rsd+xml"
set mime_type(.rss)         "application/rss+xml"
set mime_type(.rtf)         "application/rtf"
set mime_type(.rtx)         "text/richtext"
set mime_type(.s)           "text/x-asm"
set mime_type(.saf)         "application/vnd.yamaha.smaf-audio"
set mime_type(.sbml)        "application/sbml+xml"
set mime_type(.sc)          "application/vnd.ibm.secure-container"
set mime_type(.scd)         "application/x-msschedule"
set mime_type(.scm)         "application/vnd.lotus-screencam"
set mime_type(.scq)         "application/scvp-cv-request"
set mime_type(.scs)         "application/scvp-cv-response"
set mime_type(.scurl)       "text/vnd.curl.scurl"
set mime_type(.sda)         "application/vnd.stardivision.draw"
set mime_type(.sdc)         "application/vnd.stardivision.calc"
set mime_type(.sdd)         "application/vnd.stardivision.impress"
set mime_type(.sdkm)        "application/vnd.solent.sdkm+xml"
set mime_type(.sdp)         "application/sdp"
set mime_type(.sdw)         "application/vnd.stardivision.writer"
set mime_type(.see)         "application/vnd.seemail"
set mime_type(.seed)        "application/vnd.fdsn.seed"
set mime_type(.sema)        "application/vnd.sema"
set mime_type(.semd)        "application/vnd.semd"
set mime_type(.semf)        "application/vnd.semf"
set mime_type(.ser)         "application/java-serialized-object"
set mime_type(.setpay)      "application/set-payment-initiation"
set mime_type(.setreg)      "application/set-registration-initiation"
set mime_type(.sfd-hdstx)   "application/vnd.hydrostatix.sof-data"
set mime_type(.sfs)         "application/vnd.spotfire.sfs"
set mime_type(.sgl)         "application/vnd.stardivision.writer-global"
set mime_type(.sgml)        "text/sgml"
set mime_type(.sh)          "application/x-sh"
set mime_type(.shar)        "application/x-shar"
set mime_type(.shf)         "application/shf+xml"
set mime_type(.sis)         "application/vnd.symbian.install"
set mime_type(.sit)         "application/x-stuffit"
set mime_type(.sitx)        "application/x-stuffitx"
set mime_type(.skp)         "application/vnd.koan"
set mime_type(.sldm)        "application/vnd.ms-powerpoint.slide.macroenabled.12"
set mime_type(.sldx)        "application/vnd.openxmlformats-officedocument.presentationml.slide"
set mime_type(.slt)         "application/vnd.epson.salt"
set mime_type(.sm)          "application/vnd.stepmania.stepchart"
set mime_type(.smf)         "application/vnd.stardivision.math"
set mime_type(.smi)         "application/smil+xml"
set mime_type(.snf)         "application/x-font-snf"
set mime_type(.spf)         "application/vnd.yamaha.smaf-phrase"
set mime_type(.spl)         "application/x-futuresplash"
set mime_type(.spot)        "text/vnd.in3d.spot"
set mime_type(.spp)         "application/scvp-vp-response"
set mime_type(.spq)         "application/scvp-vp-request"
set mime_type(.src)         "application/x-wais-source"
set mime_type(.sru)         "application/sru+xml"
set mime_type(.srx)         "application/sparql-results+xml"
set mime_type(.sse)         "application/vnd.kodak-descriptor"
set mime_type(.ssf)         "application/vnd.epson.ssf"
set mime_type(.ssml)        "application/ssml+xml"
set mime_type(.st)          "application/vnd.sailingtracker.track"
set mime_type(.stc)         "application/vnd.sun.xml.calc.template"
set mime_type(.std)         "application/vnd.sun.xml.draw.template"
set mime_type(.stf)         "application/vnd.wt.stf"
set mime_type(.sti)         "application/vnd.sun.xml.impress.template"
set mime_type(.stk)         "application/hyperstudio"
set mime_type(.stl)         "application/vnd.ms-pki.stl"
set mime_type(.str)         "application/vnd.pg.format"
set mime_type(.stw)         "application/vnd.sun.xml.writer.template"
set mime_type(.sub)         "image/vnd.dvb.subtitle"
set mime_type(.sus)         "application/vnd.sus-calendar"
set mime_type(.sv4cpio)     "application/x-sv4cpio"
set mime_type(.sv4crc)      "application/x-sv4crc"
set mime_type(.svc)         "application/vnd.dvb.service"
set mime_type(.svd)         "application/vnd.svd"
set mime_type(.svg)         "image/svg+xml"
set mime_type(.swf)         "application/x-shockwave-flash"
set mime_type(.swi)         "application/vnd.aristanetworks.swi"
set mime_type(.sxc)         "application/vnd.sun.xml.calc"
set mime_type(.sxd)         "application/vnd.sun.xml.draw"
set mime_type(.sxg)         "application/vnd.sun.xml.writer.global"
set mime_type(.sxi)         "application/vnd.sun.xml.impress"
set mime_type(.sxm)         "application/vnd.sun.xml.math"
set mime_type(.sxw)         "application/vnd.sun.xml.writer"
set mime_type(.t)           "text/troff"
set mime_type(.tao)         "application/vnd.tao.intent-module-archive"
set mime_type(.tar)         "application/x-tar"
set mime_type(.tcap)        "application/vnd.3gpp2.tcap"
set mime_type(.tcl)         "application/x-tcl"
set mime_type(.teacher)     "application/vnd.smart.teacher"
set mime_type(.tei)         "application/tei+xml"
set mime_type(.tex)         "application/x-tex"
set mime_type(.texinfo)     "application/x-texinfo"
set mime_type(.tfi)         "application/thraud+xml"
set mime_type(.tfm)         "application/x-tex-tfm"
set mime_type(.thmx)        "application/vnd.ms-officetheme"
set mime_type(.tif)         "image/tiff"
set mime_type(.tiff)        "image/tiff"
set mime_type(.tmo)         "application/vnd.tmobile-livetv"
set mime_type(.torrent)     "application/x-bittorrent"
set mime_type(.tpl)         "application/vnd.groove-tool-template"
set mime_type(.tpt)         "application/vnd.trid.tpt"
set mime_type(.tra)         "application/vnd.trueapp"
set mime_type(.trm)         "application/x-msterminal"
set mime_type(.ts)          "application/typescript"
set mime_type(.tsd)         "application/timestamped-data"
set mime_type(.tsv)         "text/tab-separated-values"
set mime_type(.ttf)         "application/x-font-ttf"
set mime_type(.ttl)         "text/turtle"
set mime_type(.twd)         "application/vnd.simtech-mindmapper"
set mime_type(.txd)         "application/vnd.genomatix.tuxedo"
set mime_type(.txf)         "application/vnd.mobius.txf"
set mime_type(.txt)         "text/plain"
set mime_type(.ufd)         "application/vnd.ufdl"
set mime_type(.umj)         "application/vnd.umajin"
set mime_type(.unityweb)    "application/vnd.unity"
set mime_type(.uoml)        "application/vnd.uoml+xml"
set mime_type(.uri)         "text/uri-list"
set mime_type(.ustar)       "application/x-ustar"
set mime_type(.utz)         "application/vnd.uiq.theme"
set mime_type(.uu)          "text/x-uuencode"
set mime_type(.uva)         "audio/vnd.dece.audio"
set mime_type(.uvh)         "video/vnd.dece.hd"
set mime_type(.uvi)         "image/vnd.dece.graphic"
set mime_type(.uvm)         "video/vnd.dece.mobile"
set mime_type(.uvp)         "video/vnd.dece.pd"
set mime_type(.uvs)         "video/vnd.dece.sd"
set mime_type(.uvu)         "video/vnd.uvvu.mp4"
set mime_type(.uvv)         "video/vnd.dece.video"
set mime_type(.vcd)         "application/x-cdlink"
set mime_type(.vcf)         "text/x-vcard"
set mime_type(.vcg)         "application/vnd.groove-vcard"
set mime_type(.vcs)         "text/x-vcalendar"
set mime_type(.vcx)         "application/vnd.vcx"
set mime_type(.vis)         "application/vnd.visionary"
set mime_type(.viv)         "video/vnd.vivo"
set mime_type(.vsd)         "application/vnd.visio"
set mime_type(.vsdx)        "application/vnd.visio2013"
set mime_type(.vsf)         "application/vnd.vsf"
set mime_type(.vtu)         "model/vnd.vtu"
set mime_type(.vxml)        "application/voicexml+xml"
set mime_type(.wad)         "application/x-doom"
set mime_type(.wasm)        "application/wasm"
set mime_type(.wav)         "audio/wav"
set mime_type(.wax)         "audio/x-ms-wax"
set mime_type(.wbmp)        "image/vnd.wap.wbmp"
set mime_type(.wbs)         "application/vnd.criticaltools.wbs+xml"
set mime_type(.wbxml)       "application/vnd.wap.wbxml"
set mime_type(.weba)        "audio/webm"
set mime_type(.webm)        "video/webm"
set mime_type(.webp)        "image/webp"
set mime_type(.wg)          "application/vnd.pmi.widget"
set mime_type(.wgt)         "application/widget"
set mime_type(.wm)          "video/x-ms-wm"
set mime_type(.wma)         "audio/x-ms-wma"
set mime_type(.wmd)         "application/x-ms-wmd"
set mime_type(.wmf)         "application/x-msmetafile"
set mime_type(.wml)         "text/vnd.wap.wml"
set mime_type(.wmlc)        "application/vnd.wap.wmlc"
set mime_type(.wmls)        "text/vnd.wap.wmlscript"
set mime_type(.wmlsc)       "application/vnd.wap.wmlscriptc"
set mime_type(.wmv)         "video/x-ms-wmv"
set mime_type(.wmx)         "video/x-ms-wmx"
set mime_type(.wmz)         "application/x-ms-wmz"
set mime_type(.woff)        "font/woff"
set mime_type(.woff2)       "font/woff2"
set mime_type(.wpd)         "application/vnd.wordperfect"
set mime_type(.wpl)         "application/vnd.ms-wpl"
set mime_type(.wps)         "application/vnd.ms-works"
set mime_type(.wqd)         "application/vnd.wqd"
set mime_type(.wri)         "application/x-mswrite"
set mime_type(.wrl)         "model/vrml"
set mime_type(.wsdl)        "application/wsdl+xml"
set mime_type(.wspolicy)    "application/wspolicy+xml"
set mime_type(.wtb)         "application/vnd.webturbo"
set mime_type(.wvx)         "video/x-ms-wvx"
set mime_type(.x3d)         "application/vnd.hzn-3d-crossword"
set mime_type(.xap)         "application/x-silverlight-app"
set mime_type(.xar)         "application/vnd.xara"
set mime_type(.xbap)        "application/x-ms-xbap"
set mime_type(.xbd)         "application/vnd.fujixerox.docuworks.binder"
set mime_type(.xbm)         "image/x-xbitmap"
set mime_type(.xdf)         "application/xcap-diff+xml"
set mime_type(.xdm)         "application/vnd.syncml.dm+xml"
set mime_type(.xdp)         "application/vnd.adobe.xdp+xml"
set mime_type(.xdssc)       "application/dssc+xml"
set mime_type(.xdw)         "application/vnd.fujixerox.docuworks"
set mime_type(.xenc)        "application/xenc+xml"
set mime_type(.xer)         "application/patch-ops-error+xml"
set mime_type(.xfdf)        "application/vnd.adobe.xfdf"
set mime_type(.xfdl)        "application/vnd.xfdl"
set mime_type(.xhtml)       "application/xhtml+xml"
set mime_type(.xif)         "image/vnd.xiff"
set mime_type(.xlam)        "application/vnd.ms-excel.addin.macroenabled.12"
set mime_type(.xls)         "application/vnd.ms-excel"
set mime_type(.xlsb)        "application/vnd.ms-excel.sheet.binary.macroenabled.12"
set mime_type(.xlsm)        "application/vnd.ms-excel.sheet.macroenabled.12"
set mime_type(.xlsx)        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
set mime_type(.xltm)        "application/vnd.ms-excel.template.macroenabled.12"
set mime_type(.xltx)        "application/vnd.openxmlformats-officedocument.spreadsheetml.template"
set mime_type(.xml)         "application/xml"
set mime_type(.xo)          "application/vnd.olpc-sugar"
set mime_type(.xop)         "application/xop+xml"
set mime_type(.xpi)         "application/x-xpinstall"
set mime_type(.xpm)         "image/x-xpixmap"
set mime_type(.xpr)         "application/vnd.is-xpr"
set mime_type(.xps)         "application/vnd.ms-xpsdocument"
set mime_type(.xpw)         "application/vnd.intercon.formnet"
set mime_type(.xslt)        "application/xslt+xml"
set mime_type(.xsm)         "application/vnd.syncml+xml"
set mime_type(.xspf)        "application/xspf+xml"
set mime_type(.xul)         "application/vnd.mozilla.xul+xml"
set mime_type(.xwd)         "image/x-xwindowdump"
set mime_type(.xyz)         "chemical/x-xyz"
set mime_type(.yaml)        "text/yaml"
set mime_type(.yang)        "application/yang"
set mime_type(.yin)         "application/yin+xml"
set mime_type(.zaz)         "application/vnd.zzazz.deck+xml"
set mime_type(.zip)         "application/zip"
set mime_type(.zir)         "application/vnd.zul"
set mime_type(.zmm)         "application/vnd.handheld-entertainment+xml"


###########################################################################
# BOOTSTRAP

main $argv

# vim:ts=4:sts=4:et:ft=tcl
